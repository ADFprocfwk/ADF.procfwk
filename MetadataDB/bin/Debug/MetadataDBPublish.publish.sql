/*
Deployment script for OrchestrationSupport

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OrchestrationSupport"
:setvar DefaultFilePrefix "OrchestrationSupport"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
PRINT N'Creating [procfwk]...';


GO
CREATE SCHEMA [procfwk]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [procfwk].[ProcessingStageDetails]...';


GO
CREATE TABLE [procfwk].[ProcessingStageDetails] (
    [StageId]          INT            IDENTITY (1, 1) NOT NULL,
    [StageName]        VARCHAR (225)  NOT NULL,
    [StageDescription] VARCHAR (4000) NULL,
    [Enabled]          BIT            NOT NULL,
    CONSTRAINT [PK_ProcessStageDetails] PRIMARY KEY CLUSTERED ([StageId] ASC)
);


GO
PRINT N'Creating [procfwk].[ExecutionLog]...';


GO
CREATE TABLE [procfwk].[ExecutionLog] (
    [LogId]            INT              IDENTITY (1, 1) NOT NULL,
    [LocalExecutionId] UNIQUEIDENTIFIER NOT NULL,
    [StageId]          INT              NOT NULL,
    [PipelineId]       INT              NOT NULL,
    [PipelineName]     NVARCHAR (200)   NOT NULL,
    [StartDateTime]    DATETIME         NULL,
    [PipelineStatus]   NVARCHAR (200)   NULL,
    [EndDateTime]      DATETIME         NULL,
    CONSTRAINT [PK_ExecutionLog] PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [procfwk].[CurrentExecution]...';


GO
CREATE TABLE [procfwk].[CurrentExecution] (
    [LocalExecutionId] UNIQUEIDENTIFIER NOT NULL,
    [StageId]          INT              NOT NULL,
    [PipelineId]       INT              NOT NULL,
    [PipelineName]     NVARCHAR (200)   NOT NULL,
    [StartDateTime]    DATETIME         NULL,
    [PipelineStatus]   NVARCHAR (200)   NULL,
    [EndDateTime]      DATETIME         NULL,
    CONSTRAINT [PK_CurrentExecution] PRIMARY KEY CLUSTERED ([LocalExecutionId] ASC, [StageId] ASC, [PipelineId] ASC)
);


GO
PRINT N'Creating [procfwk].[PipelineParameters]...';


GO
CREATE TABLE [procfwk].[PipelineParameters] (
    [ParameterId]    INT           IDENTITY (1, 1) NOT NULL,
    [PipelineId]     INT           NOT NULL,
    [ParameterName]  VARCHAR (128) NOT NULL,
    [ParameterValue] VARCHAR (128) NULL,
    CONSTRAINT [PK_PipelineParameters] PRIMARY KEY CLUSTERED ([ParameterId] ASC)
);


GO
PRINT N'Creating [procfwk].[PipelineProcesses]...';


GO
CREATE TABLE [procfwk].[PipelineProcesses] (
    [PipelineId]   INT            IDENTITY (1, 1) NOT NULL,
    [StageId]      INT            NOT NULL,
    [PipelineName] NVARCHAR (200) NOT NULL,
    [Enabled]      BIT            NOT NULL,
    CONSTRAINT [PK_PipelineProcesses] PRIMARY KEY CLUSTERED ([PipelineId] ASC)
);


GO
PRINT N'Creating [procfwk].[DF_ProcessStageDetails_Enabled]...';


GO
ALTER TABLE [procfwk].[ProcessingStageDetails]
    ADD CONSTRAINT [DF_ProcessStageDetails_Enabled] DEFAULT ((1)) FOR [Enabled];


GO
PRINT N'Creating [procfwk].[DF_PipelineProcesses_Enabled]...';


GO
ALTER TABLE [procfwk].[PipelineProcesses]
    ADD CONSTRAINT [DF_PipelineProcesses_Enabled] DEFAULT ((1)) FOR [Enabled];


GO
PRINT N'Creating [procfwk].[FK_PipelineParameters_PipelineProcesses]...';


GO
ALTER TABLE [procfwk].[PipelineParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_PipelineParameters_PipelineProcesses] FOREIGN KEY ([PipelineId]) REFERENCES [procfwk].[PipelineProcesses] ([PipelineId]);


GO
PRINT N'Creating [procfwk].[FK_PipelineProcesses_ProcessingStageDetails]...';


GO
ALTER TABLE [procfwk].[PipelineProcesses] WITH NOCHECK
    ADD CONSTRAINT [FK_PipelineProcesses_ProcessingStageDetails] FOREIGN KEY ([StageId]) REFERENCES [procfwk].[ProcessingStageDetails] ([StageId]);


GO
PRINT N'Creating [procfwk].[UpdateExecutionLog]...';


GO

CREATE PROCEDURE procfwk.UpdateExecutionLog
AS

SET NOCOUNT ON;

BEGIN

	INSERT INTO [procfwk].[ExecutionLog]
		(
		[LocalExecutionId],
		[StageId],
		[PipelineId],
		[PipelineName],
		[StartDateTime],
		[PipelineStatus],
		[EndDateTime]
		)
	SELECT
		[LocalExecutionId],
		[StageId],
		[PipelineId],
		[PipelineName],
		[StartDateTime],
		[PipelineStatus],
		[EndDateTime]
	FROM
		[procfwk].[CurrentExecution]

	TRUNCATE TABLE [procfwk].[CurrentExecution];

END
GO
PRINT N'Creating [procfwk].[SetLogPipelineFailed]...';


GO

CREATE   PROCEDURE procfwk.SetLogPipelineFailed
	(
	@ExecutionId UNIQUEIDENTIFIER,
	@StageId INT,
	@PipelineId INT
	)
AS

BEGIN

	UPDATE
		[procfwk].[CurrentExecution]
	SET
		[PipelineStatus] = 'Failed',
		[EndDateTime] = GETDATE()
	WHERE
		[LocalExecutionId] = @ExecutionId
		AND [StageId] = @StageId
		AND [PipelineId] = @PipelineId

END
GO
PRINT N'Creating [procfwk].[SetLogPipelineSuccess]...';


GO

CREATE   PROCEDURE procfwk.SetLogPipelineSuccess
	(
	@ExecutionId UNIQUEIDENTIFIER,
	@StageId INT,
	@PipelineId INT
	)
AS

BEGIN

	UPDATE
		[procfwk].[CurrentExecution]
	SET
		[PipelineStatus] = 'Success',
		[EndDateTime] = GETDATE()
	WHERE
		[LocalExecutionId] = @ExecutionId
		AND [StageId] = @StageId
		AND [PipelineId] = @PipelineId

END
GO
PRINT N'Creating [procfwk].[SetLogPipelineRunning]...';


GO

CREATE   PROCEDURE procfwk.SetLogPipelineRunning
	(
	@ExecutionId UNIQUEIDENTIFIER,
	@StageId INT,
	@PipelineId INT
	)
AS

BEGIN

	UPDATE
		[procfwk].[CurrentExecution]
	SET
		[PipelineStatus] = 'Running'
	WHERE
		[LocalExecutionId] = @ExecutionId
		AND [StageId] = @StageId
		AND [PipelineId] = @PipelineId

END
GO
PRINT N'Creating [procfwk].[SetLogStageStart]...';


GO

CREATE   PROCEDURE procfwk.SetLogStageStart
	(
	@ExecutionId UNIQUEIDENTIFIER,
	@StageId INT
	)
AS

BEGIN
	
	DECLARE @StageStart DATETIME = GETDATE()

	UPDATE
		[procfwk].[CurrentExecution]
	SET
		[StartDateTime] = @StageStart,
		[PipelineStatus] = 'Started'
	WHERE
		[LocalExecutionId] = @ExecutionId
		AND [StageId] = @StageId

END
GO
PRINT N'Creating [procfwk].[CreateNewExecution]...';


GO
CREATE   PROCEDURE [procfwk].[CreateNewExecution]
AS

SET NOCOUNT ON;

BEGIN

	DECLARE @LocalExecutionId UNIQUEIDENTIFIER = NEWID()

	TRUNCATE TABLE [procfwk].[CurrentExecution];

	INSERT INTO [procfwk].[CurrentExecution]
		(
		[LocalExecutionId],
		[StageId],
		[PipelineId],
		[PipelineName]
		)
	SELECT
		@LocalExecutionId,
		p.[StageId],
		p.[PipelineId],
		p.[PipelineName]
	FROM
		[procfwk].[PipelineProcesses] p
		INNER JOIN [procfwk].[ProcessingStageDetails] s
			ON p.[StageId] = s.[StageId]
	WHERE
		p.[Enabled] = 1
		AND s.[Enabled] = 1

	SELECT
		@LocalExecutionId AS 'ExecutionId'

END
GO
PRINT N'Creating [procfwk].[GetPipelineParameters]...';


GO
CREATE   PROCEDURE procfwk.GetPipelineParameters
	(
	@PipelineId INT
	)
AS

SET NOCOUNT ON;

BEGIN

	DECLARE @Json VARCHAR(MAX) = ''

	IF NOT EXISTS
		(
		SELECT * FROM [procfwk].[PipelineParameters] WHERE [PipelineId] = @PipelineId
		)
		BEGIN
			SET @Json = ''
		END
	ELSE
		BEGIN
			SELECT
				@Json += '"' + [ParameterName] + '": "' + [ParameterValue] + '",'
			FROM
				[procfwk].[PipelineParameters]

			SET @Json = ',"pipelineParameters": {' + LEFT(@Json,LEN(@Json)-1) + '}'
		END

	SELECT @Json AS 'Params'

END
GO
PRINT N'Creating [procfwk].[GetPipelinesInStage]...';


GO
CREATE   PROCEDURE procfwk.GetPipelinesInStage
	(
	@StageId INT
	)
AS

SET NOCOUNT ON;

BEGIN

	SELECT 
		[PipelineId], 
		[PipelineName] 
	FROM 
		[procfwk].[CurrentExecution]
	WHERE 
		[StageId] = @StageId
	ORDER BY
		[PipelineId] ASC

END
GO
PRINT N'Creating [procfwk].[GetProcessStages]...';


GO
CREATE   PROCEDURE [procfwk].[GetProcessStages]
	(
	@ExecutionId UNIQUEIDENTIFIER
	)
AS

SET NOCOUNT ON;

BEGIN

	SELECT DISTINCT 
		[StageId] 
	FROM 
		[procfwk].[CurrentExecution]
	WHERE
		[LocalExecutionId] = @ExecutionId
	ORDER BY 
		[StageId] ASC

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



GO

GO
