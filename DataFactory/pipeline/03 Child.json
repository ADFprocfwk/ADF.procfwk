{
	"name": "03 Child",
	"properties": {
		"description": "ADF.procfwk child pipeline used to execute processing pipelines within a given execution stage. This pipeline will be called multi times in parallel.",
		"activities": [
			{
				"name": "Get Pipelines",
				"description": "Returns all pipelines from the metadata to be executed within a given processing stage.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPipelinesInStage]",
						"storedProcedureParameters": {
							"StageId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.StageId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Execute Pipelines",
				"description": "Second level ForEach to run in parallel all pipelines within the stage. Items for iteration passed from the Get Pipelines lookup activity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Pipelines",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Pipelines').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Execute Pipeline",
							"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
							"type": "AzureFunctionActivity",
							"dependsOn": [
								{
									"activity": "Log Pipeline Running",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Get Pipeline Params",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Get SPN Details",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "ExecutePipeline",
								"method": "POST",
								"body": {
									"value": "@concat('\n{\n\t\"tenantId\": \"',pipeline().parameters.TenantId,'\",\n\t\"applicationId\": \"',activity('Get SPN Details').output.firstRow.Id,'\",\n\t\"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.Secret,'\",\n\t\"subscriptionId\": \"',pipeline().parameters.SubscriptionId,'\",\n\t\"resourceGroup\": \"',item().ResourceGroupName,'\",\n\t\"factoryName\": \"',item().DataFactoryName,'\",\n\t\"pipelineName\": \"',item().PipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "PipelineExecutor",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Get Pipeline Params",
							"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[procfwk].[GetPipelineParameters]",
									"storedProcedureParameters": {
										"PipelineId": {
											"type": "Int32",
											"value": {
												"value": "@item().PipelineId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "GetSetMetadata",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Log Pipeline Running",
							"description": "Sets the current pipeline with a status of running within the current execution database table.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineRunning]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@item().PipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Get SPN Details",
							"description": "Return the SPN ID and Secret for the processing pipeline being executed. Called at this level as each pipeline can have a different SPN.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[procfwk].[GetServicePrincipal]",
									"storedProcedureParameters": {
										"DataFactory": {
											"type": "String",
											"value": {
												"value": "@item().DataFactoryName",
												"type": "Expression"
											}
										},
										"PipelineName": {
											"type": "String",
											"value": {
												"value": "@item().PipelineName",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "GetSetMetadata",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Handle Function Output",
							"description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "Execute Pipeline",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@activity('Execute Pipeline').output.Status",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "Failed",
										"activities": [
											{
												"name": "Log Pipeline Failure",
												"description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[procfwk].[SetLogPipelineFailed]",
													"storedProcedureParameters": {
														"ExecutionId": {
															"value": {
																"value": "@pipeline().parameters.ExecutionId",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"PipelineId": {
															"value": {
																"value": "@item().PipelineId",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RunId": {
															"value": {
																"value": "@activity('Execute Pipeline').output.RunIdUsed",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StageId": {
															"value": {
																"value": "@pipeline().parameters.StageId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SupportDatabase",
													"type": "LinkedServiceReference"
												}
											}
										]
									},
									{
										"value": "Succeeded",
										"activities": [
											{
												"name": "Log Pipeline Success",
												"description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[procfwk].[SetLogPipelineSuccess]",
													"storedProcedureParameters": {
														"ExecutionId": {
															"value": {
																"value": "@pipeline().parameters.ExecutionId",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"PipelineId": {
															"value": {
																"value": "@item().PipelineId\n",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"StageId": {
															"value": {
																"value": "@pipeline().parameters.StageId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SupportDatabase",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "Log Pipeline Unknown",
										"description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[procfwk].[SetLogPipelineUnknown]",
											"storedProcedureParameters": {
												"ExecutionId": {
													"value": {
														"value": "@pipeline().parameters.ExecutionId",
														"type": "Expression"
													},
													"type": "Guid"
												},
												"PipelineId": {
													"value": {
														"value": "@item().PipelineId",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"StageId": {
													"value": {
														"value": "@pipeline().parameters.StageId",
														"type": "Expression"
													},
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "SupportDatabase",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "Log Activity Failure",
							"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Execute Pipeline",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@item().PipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"StageId": {
				"type": "int"
			},
			"ExecutionId": {
				"type": "string"
			},
			"TenantId": {
				"type": "string"
			},
			"SubscriptionId": {
				"type": "string"
			}
		},
		"variables": {
			"FunctionBody": {
				"type": "String"
			}
		},
		"folder": {
			"name": "_ProcFwk"
		},
		"annotations": [
			"ADF.procfwk"
		]
	}
}