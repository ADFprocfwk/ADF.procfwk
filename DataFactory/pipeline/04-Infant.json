{
	"name": "04-Infant",
	"properties": {
		"activities": [
			{
				"name": "Wait Until Pipeline Complete",
				"type": "Until",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals('Done',activity('Get Pipeline Status').output.SimpleStatus)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Pipeline Status",
							"type": "AzureFunctionActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "CheckPipelineStatus",
								"method": "POST",
								"body": {
									"value": "@concat('\n{\n    \"tenantId\": \"',pipeline().parameters.TenantId,'\",\n    \"applicationId\": \"',pipeline().parameters.applicationId,'\",\n    \"authenticationKey\": \"',pipeline().parameters.authenticationKey,'\",\n    \"subscriptionId\": \"',pipeline().parameters.subscriptionId,'\",\n    \"resourceGroup\": \"',pipeline().parameters.resourceGroup,'\",\n    \"factoryName\": \"',pipeline().parameters.factoryName,'\",\n    \"pipelineName\": \"',pipeline().parameters.pipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "PipelineExecutor",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Wait If Running",
							"description": "True = Do nothing.\nFalse = Wait.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals('Done',activity('Get Pipeline Status').output.SimpleStatus)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait for Pipeline",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 60
										}
									}
								]
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "Pipeline Result",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Wait Until Pipeline Complete",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('Get Pipeline Status').output.Status",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "Succeeded",
							"activities": [
								{
									"name": "Pipeline Status Succeeded",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetLogPipelineSuccess]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						},
						{
							"value": "Failed",
							"activities": [
								{
									"name": "Pipeline Status Failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetLogPipelineFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@activity('Get Pipeline Status').output.RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Pipeline Status Unknown",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineUnknown]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"tenantId": {
				"type": "string"
			},
			"applicationId": {
				"type": "string"
			},
			"authenticationKey": {
				"type": "string"
			},
			"subscriptionId": {
				"type": "string"
			},
			"resourceGroup": {
				"type": "string"
			},
			"factoryName": {
				"type": "string"
			},
			"pipelineName": {
				"type": "string"
			},
			"runId": {
				"type": "string"
			},
			"executionId": {
				"type": "string"
			},
			"stageId": {
				"type": "int"
			},
			"pipelineId": {
				"type": "int"
			}
		},
		"annotations": [
			"ADF.procfwk"
		]
	}
}